// this is a lite example syntax script for Marble to transpile python to js source code files.

//----------------------

// starting with basic assignments. Var is used, bcs it supports redecleration. That just makes this more general
// x = 0 or x = y
// var x = 0 or var x = y

[var "x"] [s] ["="] [s] [var "num"] [;] [end]
[target "py"]
var [x] = [num] [5]
[/target]

//----------------------

// simple function calls. I am not actually sure if im using the [rec] and [slot] here correctly :D
// func() or func(p1, p2)
// func() or func(p1, p2)

[rec] [var] [s] [?","] [s] [/rec] [end "args"]
[target "py"]
    [1] [if [3]],[/if][slot]
[/target]

[var "f"] ["("] {[""],[pat "args"]} [")"] [;] [end "func"]
[target "py"]
    [f]([2])
[/target]

//----------------------

// "Dot-notation" - complex function calls
// text.strip().split()
// text.strip().split()

//----------------------

// simple function definitions. This does not include the body of the function, which would be handled with slots, but is a much more advanced pattern for these purposes.
// def f():
// function f(){}

[rec] [var] [s] [?"="] [s] [?var] [?","] [s] [/rec] [end "args_def"]
[target "py"]
    [1] [if [3]]= [5][/if] [if [6]],[/if][slot]
[/target]

[var "f"] ["("] {[""],[pat "args_def"]} [")"] [end "func_args"]
[target "py"]
    [f]([2])
[/target]

["def"] [pat "func_args"] [":"] [end "func_def"]
[target "py"]
    function [1]{}
[/target]

//----------------------

